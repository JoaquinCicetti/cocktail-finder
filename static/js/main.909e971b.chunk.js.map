{"version":3,"sources":["serviceWorker.ts","interfaces/ListReducer.ts","redux/reducers/listReducer.ts","redux/store.ts","components/AnimatedList/AnimatedList.tsx","hooks/useMediaQuery.ts","contexts/theme.tsx","hooks/useTheme.ts","components/App/App.tsx","components/Info/Info.tsx","redux/actions.ts","components/Searcher/Searcher.tsx","components/ToggleButton/ToggleButton.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionTypes","initialState","list","status","listReducer","state","action","type","ListReducer","clearList","receiveCocktails","payload","length","requestCocktails","store","createStore","applyMiddleware","thunk","List","posed","ul","exit","opacity","enter","transition","default","duration","beforeChildren","staggerChildren","AnimatedItem","a","Item","forwardRef","ref","children","key","className","onClick","AnimatedList","useState","selected","setSelected","initialPose","pose","map","cocktail","index","idDrink","strDrinkThumb","strDrink","strInstructions","strCategory","strGlass","id","src","alt","ingredients","Object","entries","forEach","value","indexOf","split","name","parseInt","measure","getIngredients","i","useMediaQuery","Themes","voidContext","theme","dark","setTheme","ThemeContext","React","createContext","useTheme","useContext","toggleTheme","useCallback","light","App","useSelector","checked","toggle","Info","href","target","rel","TIMESTAMP","Date","getTime","clearCocktails","search","dispatch","sent","fetch","then","response","json","cocktails","drinks","console","log","catch","error","filter","setFilter","useDispatch","placeholder","onChange","event","title","ToggleButton","htmlFor","ReactDOM","render","themeHandler","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.909e971b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Cocktail } from './Cocktail';\nexport enum ActionTypes {\n    clearList = 'CLEAR_LIST',\n    requestCocktails = 'REQUEST_COCTKTAILS',\n    receiveCocktails = 'RECIVE_COCTKTAILS',\n}\nexport interface State {\n    list: Array<Cocktail>;\n    status: 'initial' | 'empty' | 'fetching' | 'fetched';\n}\nexport interface Action {\n    type: ActionTypes.clearList | ActionTypes.requestCocktails | ActionTypes.receiveCocktails;\n    payload?: Array<Cocktail>;\n}\n","import * as ListReducer from '../../interfaces/ListReducer';\n\nconst initialState: ListReducer.State = {\n    list: [],\n    status: 'initial',\n};\n\nconst listReducer = (state = initialState, action: ListReducer.Action): ListReducer.State => {\n    switch (action.type) {\n        case ListReducer.ActionTypes.clearList: {\n            return {\n                status: 'initial',\n                list: [],\n            };\n        }\n        case ListReducer.ActionTypes.receiveCocktails: {\n            return {\n                list: action.payload ? action.payload : [],\n                status: action.payload && action.payload.length ? 'fetched' : 'empty',\n            };\n        }\n        case ListReducer.ActionTypes.requestCocktails: {\n            return {\n                ...state,\n                status: `fetching`,\n            };\n        }\n\n        default:\n            return state;\n    }\n};\nexport default listReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport listReducer from './reducers/listReducer';\n\nconst store = createStore(listReducer, applyMiddleware(thunk));\nexport default store;\n","import React, { forwardRef, useState } from 'react';\nimport posed, { PoseGroup } from 'react-pose';\nimport { Info } from '../';\nimport { Cocktail } from '../../interfaces/Cocktail';\nimport './AnimatedList.scss';\n\ninterface Props {\n    status: string;\n    list: Array<Cocktail>;\n}\nconst List = posed.ul({\n    exit: {\n        opacity: 0,\n    },\n    enter: {\n        opacity: 1,\n        transition: { default: { duration: 100 } },\n        beforeChildren: true,\n        staggerChildren: 100,\n    },\n});\nconst AnimatedItem = posed.a({\n    exit: {\n        opacity: 0,\n    },\n    enter: { opacity: 1 },\n});\n\nconst Item = forwardRef<any, any>(({ children, key, className, onClick }, ref) => {\n    return (\n        <AnimatedItem key={key} ref={ref} className={className} onClick={onClick}>\n            {children}\n        </AnimatedItem>\n    );\n});\nconst AnimatedList: React.FC<Props> = ({ status, list }) => {\n    const [selected, setSelected] = useState('');\n\n    const handleClick = (id: string) => {\n        if (id === selected) setSelected('');\n        else setSelected(id);\n    };\n    interface Ingredients {\n        name: string;\n        measure: string;\n    }\n    const getIngredients = (cocktail: Cocktail) => {\n        // this is awful, like the API response\n        const ingredients: Array<Ingredients> = [];\n        Object.entries(cocktail).forEach(value => {\n            //key\n            if (value[0].indexOf('strIngredient') > -1) {\n                const key = value[0].split('strIngredient')[1];\n                const name = value[1];\n                const index = parseInt(key);\n                if (key && index && name !== null)\n                    ingredients[index - 1] = {\n                        name,\n                        measure: '',\n                    };\n            } else if (value[0].indexOf('strMeasure') > -1) {\n                const key = value[0].split('strMeasure')[1];\n                const measure = value[1];\n                const index = parseInt(key);\n                if (key && index && ingredients[index - 1])\n                    ingredients[index - 1].measure = measure;\n            }\n        });\n        return ingredients;\n    };\n    return (\n        <div className=\"animatedList\">\n            {status === 'fetched' ? (\n                <List initialPose=\"exit\" pose={status === 'fetched' ? 'enter' : 'exit'}>\n                    <PoseGroup>\n                        {list.map((cocktail, index) => {\n                            const {\n                                idDrink,\n                                strDrinkThumb,\n                                strDrink,\n                                strInstructions,\n                                strCategory,\n                                strGlass,\n                            } = cocktail;\n                            const status = idDrink === selected ? 'expanded' : 'collapsed';\n                            return (\n                                <Item\n                                    className=\"animatedItem\"\n                                    key={`clientItem_${idDrink}`}\n                                    onClick={() => handleClick(idDrink)}>\n                                    <img src={strDrinkThumb} alt={strDrink} className=\"image\" />\n                                    <div className={`description ${status}`}>\n                                        <p className=\"title\">{strDrink}</p>\n\n                                        <span className={`instructions ${status}`}>\n                                            <span>{strInstructions}</span>\n                                            {status === 'expanded' && (\n                                                <>\n                                                    <p>\n                                                        <span className=\"label\">Category</span>\n                                                        <b>{strCategory}</b>\n                                                    </p>\n                                                    <p>\n                                                        <span className=\"label\">Glass</span>\n                                                        <b>{strGlass}</b>\n                                                    </p>\n                                                    <span className=\"label\">Ingredients</span>\n                                                    <ul>\n                                                        {getIngredients(cocktail).map(\n                                                            (i: Ingredients, index: number) => {\n                                                                return (\n                                                                    <li\n                                                                        key={`ingredient_${idDrink}_${index}`}>\n                                                                        {i.name} {i.measure}\n                                                                    </li>\n                                                                );\n                                                            },\n                                                        )}\n                                                    </ul>\n                                                </>\n                                            )}\n                                        </span>\n                                    </div>\n                                </Item>\n                            );\n                        })}\n                    </PoseGroup>\n                </List>\n            ) : (\n                <Info status={status} />\n            )}\n        </div>\n    );\n};\n\nexport default AnimatedList;\n","import { useLayoutEffect, useState } from 'react';\n\nfunction useMediaQuery(mediaQuery: string): boolean {\n    const initialValue = window.matchMedia(mediaQuery).matches;\n    const [matches, setMatches] = useState(initialValue);\n    useLayoutEffect(() => {\n        const mediaQueryList = window.matchMedia(mediaQuery);\n        const listener = (e: MediaQueryListEvent) => setMatches(e.matches);\n        mediaQueryList.addListener(listener);\n        return () => mediaQueryList.removeListener(listener);\n    }, [mediaQuery]);\n\n    return matches;\n}\nexport default useMediaQuery;\n","import React, { useState } from 'react';\nenum Themes {\n    dark = 'dark',\n    light = 'light',\n}\ninterface ThemeContext {\n    theme: Themes.dark | Themes.light;\n    setTheme: (theme: Themes.dark | Themes.light) => void;\n}\nconst voidContext: ThemeContext = {\n    theme: Themes.dark,\n    setTheme: theme => {},\n};\nconst ThemeContext = React.createContext<ThemeContext>(voidContext);\n\nconst ThemeProvider: React.FC = ({ children }) => {\n    const [theme, setTheme] = useState(Themes.dark);\n\n    const themeHandler = {\n        theme,\n        setTheme,\n    };\n    return <ThemeContext.Provider value={themeHandler}>{children}</ThemeContext.Provider>;\n};\n\nexport { Themes, ThemeContext, ThemeProvider };\n","import { useContext, useCallback } from 'react';\nimport { ThemeContext, Themes } from '../contexts/theme';\nfunction useTheme() {\n    const { theme, setTheme } = useContext(ThemeContext);\n\n    const toggleTheme = useCallback(() => {\n        if (theme === Themes.dark) setTheme(Themes.light);\n        else setTheme(Themes.dark);\n    }, [theme, setTheme]);\n\n    return {\n        theme,\n        toggleTheme,\n        Themes,\n    };\n}\nexport default useTheme;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTheme } from '../../hooks';\nimport { Searcher, ToggleButton } from '../';\nimport { AnimatedList } from '..';\nimport './App.scss';\nimport * as ListReducer from '../../interfaces/ListReducer';\n\nconst App: React.FC = () => {\n    const { theme, Themes, toggleTheme } = useTheme();\n    const { list, status } = useSelector((state: ListReducer.State) => ({\n        list: state.list,\n        status: state.status,\n    }));\n    return (\n        <div className={theme === Themes.dark ? 'theme-dark' : 'theme-light'}>\n            <div className=\"container\">\n                <ToggleButton checked={theme === Themes.light} toggle={toggleTheme} />\n                <Searcher />\n                <AnimatedList list={list} status={status} />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport './Info.scss';\n\ninterface Props {\n    status: string;\n}\nconst Info: React.FC<Props> = ({ status }) => {\n    return (\n        <div className=\"info\">\n            {status === 'fetching' && <span>Searching...</span>}\n            {status === 'empty' && <span>No result</span>}\n            {status === 'initial' && (\n                <div className=\"about\">\n                    <b className=\"appName\">Cocktail Finder</b>\n                    <hr />\n                    <p className=\"version\">React: 16.10.2</p>\n                    <p className=\"version\">Redux: 4.0.4</p>\n                    <p className=\"version\">Redux-thunk: 2.3.0</p>\n                    <p className=\"version\">Redux-redux: 7.1.1</p>\n                    <p className=\"version\">Typescript: 3.6.4</p>\n                    <p className=\"version\">React-pose: 4.0.9</p>\n\n                    <hr />\n                    <a\n                        className=\"version\"\n                        href=\"https://www.thecocktaildb.com/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">\n                        API\n                    </a>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Info;\n","import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport * as ListReducer from '../interfaces/ListReducer';\nimport { Cocktail, APIResponse } from '../interfaces/Cocktail';\n// avoid unsorted resolve of API request\nlet TIMESTAMP = new Date().getTime();\n\n// clear cocktail list\nexport const clearCocktails = () => ({\n    type: ListReducer.ActionTypes.clearList,\n});\n\n// set status\nexport const requestCocktails = (value: string) => ({\n    type: ListReducer.ActionTypes.requestCocktails,\n    payload: value,\n});\n\n// save fetched list\nexport const receiveCocktails = (cocktails: Array<Cocktail>) => ({\n    type: ListReducer.ActionTypes.receiveCocktails,\n    payload: cocktails,\n});\n\n// send search request\nexport const search = (\n    value: string,\n): ThunkAction<void, ListReducer.State, null, Action<string>> => dispatch => {\n    // set status\n    dispatch(requestCocktails(value));\n    const sent = new Date().getTime();\n    // return a new promise\n    return fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${value}`)\n        .then((response: Response) => {\n            return response.json();\n        })\n        .then((json: APIResponse) => {\n            if (TIMESTAMP < sent) {\n                dispatch(receiveCocktails(json.drinks));\n                TIMESTAMP = sent;\n            } else console.log('se rompio');\n        })\n        .catch(error => console.log('An error occurred.', error));\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { search, clearCocktails } from './../../redux/actions';\nimport './Searcher.scss';\n\nconst App: React.FC = () => {\n    const [filter, setFilter] = useState('');\n    const dispatch = useDispatch();\n\n    const onSearcherChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = event.target.value;\n\n        if (value.length > 2) dispatch(search(value));\n        else if (!value.length) dispatch(clearCocktails());\n\n        setFilter(value);\n    };\n\n    const clearSearcher = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        dispatch(clearCocktails());\n        setFilter('');\n    };\n    return (\n        <div className=\"searcher\">\n            <input\n                placeholder=\"Search your favorite cocktail\"\n                value={filter}\n                onChange={onSearcherChange}\n            />\n            {filter && (\n                <button title=\"Clear\" className=\"clearButton\" onClick={clearSearcher}>\n                    x\n                </button>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport './ToggleButton.scss';\n\ninterface Props {\n    checked: boolean;\n    toggle: () => void;\n}\nconst ToggleButton: React.FC<Props> = ({ checked, toggle }) => {\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        toggle();\n    };\n    return (\n        <div className=\"toggleButton\">\n            <label htmlFor=\"_toggleButton\" className={checked ? 'checked' : ''} />\n            <input id=\"_toggleButton\" type=\"checkbox\" checked={checked} onChange={handleChange} />\n        </div>\n    );\n};\n\nexport default ToggleButton;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { App } from './components';\nimport { ThemeProvider } from './contexts/theme';\nimport './index.scss';\n\nReactDOM.render(\n    <Provider store={store}>\n        <ThemeProvider>\n            <App />\n        </ThemeProvider>\n    </Provider>,\n    document.getElementById('root'),\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}